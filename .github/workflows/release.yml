name: Release Update

# This workflow merges a PR and, optionally, releases a GitHub Release with an auto bumped version.

# Using the merge-bump-<VERSION> label on a PR, you can choose to bump the major, minor, or patch version
# Using the merge-no-bump label on a PR, you can merge the PR with no version change

# You should only attach **one** of these labels, anymore will result in undefined behavior as to which bump will be performed.


# Run only on labeled Pull Requests
on:
  pull_request_target:
    types:
      - labeled

jobs:
  release:
    # Limit job to requests with a merge-* label on them
    if: contains(${{ github.event.pull_request.labels.*.name }}, 'merge-')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Fetches the last tag in the repo
      - name: üîô Get Previous Tag
        id: previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      # Generates the next major, minor, and patch version given the previous tag
      - name: ‚è≠ Get Next Versions
        id: next_versions
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previous_tag.outputs.tag }}

      # Selects the next version based off the label attached to the PR
      # NOTE: it will select _the first_ tag it sees. Do **not** attach more than one `merge-bump-` labels
      - name: ‚úÖ Select Next Version
        id: next_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_REF: ${{ github.head_ref }}
          MAJOR_VERSION: ${{ steps.next_versions.outputs.major }}
          MINOR_VERSION: ${{ steps.next_versions.outputs.minor }}
          PATCH_VERSION: ${{ steps.next_versions.outputs.patch }}
          NO_VERSION: no-bump
        run: |
          LABEL=$(gh pr view $HEAD_REF --json labels -q '.labels[] | select(.name | contains("merge-bump-")) | .name' | head -n 1)
          echo "Found label: $LABEL"

          if [[ $LABEL == "merge-bump-major" ]]; then
            echo "::set-output name=tag::$MAJOR_VERSION"
          elif [[ $LABEL == "merge-bump-minor" ]]; then
            echo "::set-output name=tag::$MINOR_VERSION"
          elif [[ $LABEL == "merge-bump-patch" ]]; then
            echo "::set-output name=tag::$PATCH_VERSION"
          else
            echo "Setting no-bump as no bump label was found"
            echo "::set-output name=tag::$NO_VERSION"
          fi

      # Merges the underlying PR
      - name: „äóÔ∏è Merge PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_REF: ${{ github.head_ref }}
        run: gh pr merge --merge $HEAD_REF

      # Delete the underlying PR branch
      - name: ‚ê° Delete PR Branch
        if: github.event.pull_request.head.repo.fork == false
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: git push --delete origin $HEAD_REF

      # Checkout main again, the PR has merged so we want to pull that update down before bumping the version
      - uses: actions/checkout@v3
        if: contains(toJSON(github.event.pull_request.labels.*.name), 'merge-bump-')
        with:
          ref: main

      # Apply the version bump by editing the Versions.swift file
      - name: üëä Bump Version
        if: contains(toJSON(github.event.pull_request.labels.*.name), 'merge-bump-')
        env:
          TAG: ${{ steps.next_version.outputs.tag }}
        run: sed -i 's/.*static let version.*/(printf '\\t')static let version = "$TAG"/g' Sources/gen-ir/Versions.swift
      
      # Commit the change to main
      - name: üíç Commit Version Change
        if: contains(toJSON(github.event.pull_request.labels.*.name), 'merge-bump-')
        env:
          TAG: ${{ steps.next_version.outputs.tag }} 
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@github.com'

          git add Sources/gen-ir/Versions.swift
          git commit -m "Gen IR version: $TAG"
          git push
      
      # Create a new GitHub release with the new version
      - name: üöÄ Release New Version
        uses: softprops/action-gh-release@v1
        if: contains(toJSON(github.event.pull_request.labels.*.name), 'merge-bump-')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.tag }}
          name: ${{ steps.next_version.outputs.tag }}